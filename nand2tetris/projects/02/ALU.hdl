// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Mux16(a=x, b=false, sel=zx, out=zx1);
   Not16(in=x, out=x1);
   Mux16(a=x, b=n1, sel=nx, out=nx1);
   
   Mux16(a=y, b=false, sel=zy, out=zy1);
   Not16(in=y, out=y1);
   Mux16(a=y, b=y1, sel=ny, out=ny1);

   Add16(a=x, b=y, out=add1);
   And16(a=x, b=y, out=and1);
   Mux16(a=and1, b=add1, sel=f, out=o1);

   Not16(in=o1, out=o2);
   Mux16(a=o1, b=o2, sel=no, out=out, out=o3);

   Or(a = o3[0], b = o3[1], out = o1);
    Or(a = o1, b = in[2], out = o2);
    Or(a = o2, b = in[3], out = o3);
    Or(a = o3, b = in[4], out = o4);
    Or(a = o4, b = in[5], out = o5);
    Or(a = o5, b = in[6], out = o6);
    Or(a = o6, b = in[7], out = o7);
    Or(a = o7, b = in[8], out = o8);
    Or(a = o8, b = in[9], out = o9);
    Or(a = o9, b = in[10], out = o10);
    Or(a = o10, b = in[11], out = o11);
    Or(a = o11, b = in[12], out = o12);
    Or(a = o12, b = in[13], out = o13);
    Or(a = o13, b = in[14], out = o14);
    Or(a = o14, b = in[15], out = zr1);
   Not(a=zr1, out=zr);

   Or(a=o3[15], b=false, out=ng);
}